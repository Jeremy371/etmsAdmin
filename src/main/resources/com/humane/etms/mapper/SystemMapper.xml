<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.humane.etms.mapper.SystemMapper">
    <select id="account" resultType="com.humane.etms.dto.AccountDto">
        select *
        from (select user.user_id, user.password,
                if(user_role.role_name = 'ROLE_ADMIN', '', concat(count(user_admission.admission_cd), '개')) as admissions
                , (select group_concat(admission.admission_nm) from user_admission
                    inner join admission on admission.admission_cd = user_admission.admission_cd where user.user_id = user_id group by user_id
                  ) as lists
                , case user_role.role_name
                    when 'ROLE_ADMIN' then '관리자'
                    when 'ROLE_USER' then '사용자'
                    else '신분증확인용' end as role
                , user_role.role_name
                from user
                inner join user_role on user_role.user_id = user.user_id
                left join user_admission on user_admission.user_id = user.user_id
                left join admission on admission.admission_cd = user_admission.admission_cd
                <where>
                    <!--not user.user_id = 'api' and not user.user_id = 'admin'-->
                    <if test="param != null">
                        <if test="param.userId != null">and user_id like '%' #{param.user_id} '%'</if>
                        <if test="param.roleName != null">and role_name = #{param.roleName}</if>
                    </if>
                </where>
                group by user.user_id, user.password
        ) result
        <where>
            <if test="param != null">
                <if test="param.admissionNm != null">and lists like '%' #{param.admissionNm} '%' </if>
            </if>
        </where>
    </select>

    <select id="admission" resultType="com.humane.etms.dto.AccountDto">
        select distinct admission.admission_cd, admission.admission_nm from admission
        inner join attend on attend.admission_cd = admission.admission_cd order by admission.admission_cd, admission.admission_nm
    </select>

    <select id="accountDetail" resultType="com.humane.etms.dto.AccountDto">
        select admission.admission_cd, admission_nm, user_id
        from admission
        inner join user_admission on user_admission.admission_cd = admission.admission_cd
        <where>
            <if test="userId != null">
                and user_admission.user_id = #{userId}
            </if>
        </where>
    </select>

    <select id="getDevice" resultType="com.humane.etms.dto.DeviceDto">
        select device_id, cast(device_no as unsigned) as device_no
            , case package_name
            when 'com.humane.etms2.app' then '출결&amp;신원확인'
            when 'com.humane.etms2.mgr' then '중간관리본부'
            end as package_name
            , phone_no, uuid, version_name, last_dttm
            , case when (select count(*) from attend_map where attend_map.device_id = device.device_id and attend_map.attend_dttm is not null and attend_map.device_id is not null) > 0
                    then (select count(*) from attend_map where attend_map.device_id = device.device_id and attend_map.attend_dttm is not null and attend_map.device_id is not null)
                    else '-' end as checkCnt
        from device
        <where>
            <if test="param != null">
                <if test="param.packageName">AND package_name = CONCAT('com.humane.etms2.', #{param.packageName})</if>
                <if test="param.deviceNo">AND device_no = #{param.deviceNo}</if>
                <if test="param.phoneNo">AND phone_no like '%' #{param.phoneNo} '%' </if>
            </if>
        </where> 
    </select>

    <insert id="insertAdmission" parameterType="String" useGeneratedKeys="true" keyProperty="id">
        insert into user_admission values (null, #{admissionCd}, #{userId})

        <selectKey keyProperty="id" resultType="Long" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
    </insert>

    <delete id="deleteAdmission" parameterType="String">
        delete from user_admission where user_id = #{userId}
    </delete>

    <update id="modifyRole" parameterType="String">
        update user_role set user_role.role_name = #{roleName} where user_role.user_id = #{userId}
    </update>

    <update id="modifyUser" parameterType="String">
        update user set user.password = #{password} where user.user_id = #{userId}
    </update>

    <delete id="deleteRole" parameterType="String">
        delete from user_role where user_id = #{userId}
    </delete>

    <delete id="deleteAccount" parameterType="String">
        delete from user where user_id = #{userId}
    </delete>

    <insert id="addAccount" parameterType="String">
        insert into user values (#{userId}, #{password})
    </insert>

    <insert id="addRole" parameterType="String" useGeneratedKeys="true" keyProperty="id">
        insert into user_role values (null, #{roleName}, #{userId})

        <selectKey keyProperty="id" resultType="Long" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
    </insert>

    <select id="idCheck" resultType="com.humane.etms.dto.AccountDto">
        select user_id from user
    </select>

    <select id="attendInfo" resultType="com.humane.etms.dto.AttendInfoDto">
        select attend.*, admission.admission_nm
        from attend
        inner join admission on admission.admission_cd = attend.admission_cd
        <where>
            <if test="param != null">
                <if test="param.admissionNm">and admission.admission_nm = #{param.admissionNm}</if>
                <if test="param.attendCd">and attend.attend_cd = #{param.attendCd}</if>
                <if test="param.attendNm">and attend.attend_nm = #{param.attendNm}</if>
            </if>
        </where>
    </select>

    <update id="modifyAttend">
        <if test="param != null">
            update attend set attend_nm = #{param.attendNm}, type_nm = #{param.typeNm}, attend_len = #{param.attendLen}
            , attend_date = #{param.atDate}, attend_time = #{param.atTime}, is_paper_change = #{param.isPaperChange}
            , is_use_group = #{param.isUseGroup}, paper_cnt = #{param.paperCnt}, paper_len = #{param.paperLen}, paper_header = #{param.paperHeader}
            where attend_cd = #{param.attendCd}
        </if>
    </update>

    <select id="duplicate" resultType="com.humane.etms.dto.DuplicateDto">
        select *
        from(select *, case when count(*) = 0 then '-' else concat(count(*), '대') end as duplicateCnt, count(*) as cnt
                from( select attend.attend_nm, attend.attend_date, attend.attend_time, examinee.examinee_cd, examinee.examinee_nm
                        from attend_map_log
                        inner join attend on attend.attend_cd = attend_map_log.attend_cd
                        inner join examinee on examinee.examinee_cd = attend_map_log.examinee_cd
                        group by attend_map_log.examinee_cd, attend_map_log.device_id
                    ) a
                group by a.examinee_cd
             ) result
        <where>
            and cnt > 1
        </where>
    </select>

    <select id="innerDuplicate" resultType="com.humane.etms.dto.DuplicateDto">
        select examinee.examinee_cd, examinee.examinee_nm, device.device_id, device.device_no
        , case when attend_map_log.attend_dttm is not null then true else false end as current_state
        , attend_map_log.log_dttm, hall.bldg_nm, hall.hall_nm
        from attend_map_log
        inner join examinee on examinee.examinee_cd = attend_map_log.examinee_cd
        inner join device on device.device_id = attend_map_log.device_id
        left join hall on hall.hall_cd = attend_map_log.attend_hall_cd
        <where>
            <if test="param != null">
                <if test="param.attendCd != null"> and attend_map_log.attend_cd = #{param.attendCd} </if>
                <if test="param.examineeCd != null"> and attend_map_log.examinee_cd = #{param.examineeCd} </if>
            </if>
         </where>
         order by attend_map_log.log_dttm desc
    </select>


    <!-- TODO: 고려대 면접고사용 -->
    <select id="orderCnt" resultType="java.lang.Long">
        select count(*)
        from exam_map
        inner join exam on exam.exam_cd = exam_map.exam_cd
        inner join admission on admission.admission_cd = exam.admission_cd
        <where>
            AND group_nm is not null
            <if test="param != null">
                AND admission.admission_cd = #{param}
            </if>
        </where>
    </select>

    <select id="order" resultType="com.humane.etms.dto.ExamineeDto">
        select result.*
        from (select admission.admission_cd, admission.admission_nm, attend.type_nm
                    , examinee.examinee_cd, examinee.examinee_nm, attend.attend_date
                    , (case when attend_map.group_nm is null then false else true end) as is_attend
                    , max(case when attend_map.examinee_cd = examinee.examinee_cd then attend_map.group_nm end) as group_nm
                    , max(case when attend_map.examinee_cd = examinee.examinee_cd then attend_map.group_order end) as group_order
                    , max(case when attend_map.examinee_cd = examinee.examinee_cd then attend_map.debate_nm end) as debate_nm
                    , max(case when attend_map.examinee_cd = examinee.examinee_cd then attend_map.debate_order end) as debate_order
                from attend_map
                inner join examinee on examinee.examinee_cd = attend_map.examinee_cd
                inner join attend on attend.attend_cd = attend_map.attend_cd
                inner join admission on admission.admission_cd = attend.admission_cd
                group by admission.admission_cd, attend_map.examinee_cd) result
        <where>
            <if test="param != null">
                <if test="param.admissionNm != null"> and result.admission_nm = #{param.admissionNm} </if>
                <if test="param.typeNm != null"> and result.type_nm = #{param.typeNm} </if>
                <if test="param.attendDate != null"> and result.attend_date = #{param.attendDate} </if>
                <if test="param.groupNm != null"> and result.group_nm = #{param.groupNm} </if>
                <if test="param.groupOrder != null"> and result.group_order = #{param.groupOrder} </if>
                <if test="param.debateNm != null"> and result.debate_nm = #{param.debateNm} </if>
                <if test="param.debateOrder != null"> and result.debate_order = #{param.debateOrder} </if>
            </if>
        </where>
    </select>

    <select id="waitHall" resultType="com.humane.etms.dto.WaitHallDto">
        select hall.head_nm, hall.bldg_nm, awh.hall_cd, hall.hall_nm, awh.group_nm
        from attend_wait_hall awh
        inner join hall on hall.hall_cd = awh.hall_cd
        order by awh.hall_cd, awh.group_nm
    </select>

    <delete id="delWaitHall">
        delete from attend_wait_hall
        <where>
            <if test="hallCd != null"> and attend_wait_hall.hall_cd = #{hallCd}</if>
        </where>
    </delete>

    <insert id="addWaitHall" parameterType="String" useGeneratedKeys="true" keyProperty="id">
        insert into attend_wait_hall values (null, #{groupNm}, #{hallCd}, null)

        <selectKey keyProperty="id" resultType="Long" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
    </insert>
</mapper>
